// –ó–∞–¥–∞—á–∞ 3. –ú–æ—Ä—Å—å–∫–∏–π –±—ñ–π. –í–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏–Ω–æ–º –Ω–∞ –¥–≤–æ–≤–∏–º—ñ—Ä–Ω–æ–º—É –ø–æ–ª—ñ —Ä–æ–∑–º—ñ—Ä–æ–º 6*6 —Ä–æ–∑—Ç–∞—à–æ–≤—É—î—Ç—å—Å—è 5 –∫–æ—Ä–∞–±–ª—ñ–≤. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç—Ä—ñ–ª—è—î –≤–∫–∞–∑—É—é—á–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –ì—Ä–∞ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è –ø–æ–∫–∏ –Ω–µ –ø–æ—Ç–æ–ø–ª–µ–Ω–æ —É—Å—ñ –∫–æ—Ä–∞–±–ª—ñ –∞–±–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–∞–∫—ñ–Ω—á–∞—Ç—å—Å—è —Å–Ω–∞—Ä—è–¥–∏.

// 1) –∑—Ä–æ–±–∏–º–æ –º–∞—Å–∏–≤ 6*6
// 2) –∑–∞–ø–æ–≤–Ω–∏–º–æ –π–æ–≥–æ –Ω—É–ª—è–º–∏

// 3)—Ä–∞–Ω–¥–æ–º–Ω–æ —Ä–æ–∑—Ç–∞—à—É—î–º–æ 5 –∫–æ—Ä–∞–±–ª—ñ–≤ –∑–∞–º—ñ–Ω—é—é—á–∏ –Ω—É–ª—ñ –Ω–∞ –æ–¥–∏–Ω–∏—Ü—ñ
//         - —Å–ø–æ—á–∞—Ç–∫—É —Ä–æ–±–∏–º–æ —Ä–∞–Ω–¥–æ–º–∏ –ø–æ —Ö —ñ —É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏,
//         - –∑–∞–ø–æ–≤–Ω—é—î–º–æ –Ω–∞—à –º–∞—Å—Å–∏–≤ –∑–≥—ñ–¥–Ω–æ –Ω–æ–≤–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—ñ–≤

// 4) —é–∑–µ—Ä –ø–æ—á–∏–Ω–∞—î –≤–≤–æ–¥–∏—Ç–∏ –ø–æ —á–µ—Ä–∑—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ö —ã —É
// 5) –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—É–¥–∏ –ø–æ–ø–∞–≤, —è–∫—â–æ –ø–æ–ø–∞–≤ —Ç–æ 1 –∑–º—ñ–Ω—é—î–º–æ –Ω–∞ "—â–æ—Å—å"—è–∫—â–æ –Ω—ñ —Ç–æ 0 –Ω–∞ "—â–æ—Å—å"


// –ø–æ–ª–µ 6 –Ω–∞ 6
if (confirm('start')) {
  function getArra6Of6() {
    let mapArray = [];
    for (let row = 0; row < 6; row++) {
      mapArray.push([]);
      for (let column = 0; column < 6; column++) {
        mapArray[row].push(0)      
      }
    }
    return mapArray
  }
  let mapboat = getArra6Of6()
  // console.log(getArra6Of6());
  
  let boatX = () => Math.floor(Math.random() * (6))
  let boatY = () => Math.floor(Math.random() * (6))
  //—Ä–æ–±–∏–º–æ –∫–æ—Ä–∞–±–ª—ñ
  function getBoats(map) {
    for (let boat = 0; boat < 5; boat++) {
      let x =boatX()
      let y = boatY()
      map[x].splice(y,1,1)
      //–ø–æ–∫—Ä–∞—â–∏—Ç–∏ —è–∫—â–æ —Ä–∞–Ω–¥–æ–º–∏ —Å–ø—ã–≤–ø–∞–¥–∞—é—Ç—å
    }
    return map
   }
  function getUserPlaing(boatMap, amountTry = 5) {
    // console.log(boatMap);
    
    for (let attempt = 1; attempt <= amountTry; attempt++) {
      alert(`–≤ —Ç–µ–±–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—è ${attempt} —Å–ø—Ä–æ–±`)
      let pointX = parseInt(prompt('–≤–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–æ –≤–∏—Å–æ—Ç—ñ'))
      let pointY = parseInt(prompt('–≤–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–æ —à–∏—Ä–∏–Ω—ñ'))
      if (boatMap[pointX][pointY] === 1) {
        alert('—Ç–∏ –ø–æ–ø–∞–≤')
        boatMap[pointX].splice(pointY,1,5)
      }
      else{
        alert('—Ç–∏ –Ω–µ –ø–æ–ø–∞–≤')
        boatMap[pointX].splice(pointY,1,7)
      }
    }
    return boatMap
  }
  function getOutputMapBoats(endmap) {
    let output = '<table border="1" style="border-collapse: collapse; width: 200px; font-size: 18px;">';
    for (let i = 0; i < endmap.length; i++) {
      output += '<tr>';
      for (let j = 0; j < endmap[i].length; j++) {
        let symbol;
        switch (endmap[i][j]) {
          case 0: symbol = 'üåä'; break; 
          case 1: symbol = 'üõ∂'; break; 
          case 5: symbol = '‚öì'; break; 
          case 7: symbol = 'üí£'; break; 
        }
        
        
        output += `<td style="border: 1px solid black; padding: 20px; text-align: center;">${symbol}</td>`; 
      }
      output += '</tr>';
    }
    output += '</table>';
    return output;
  }
  
  // getBoats(mapboat); 
  //  console.log(getBoats(mapboat));
  //  console.log(getUserPlaing(getBoats(mapboat)));
  //  document.writeln((getUserPlaing(getBoats(mapboat))))
  document.writeln(getOutputMapBoats(getUserPlaing(getBoats(mapboat))))
  
}